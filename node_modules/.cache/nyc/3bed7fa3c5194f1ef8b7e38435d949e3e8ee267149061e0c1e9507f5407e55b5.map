{"version":3,"sources":["src/tests/metric.spec.js"],"names":["test","require","proxyquire","sinon","agentFixtures","sandbox","uuid","config","logging","uuidArgs","where","AgentStub","hasMany","spy","findOne","stub","withArgs","returns","Promise","resolve","byuuid","newMetric","type","value","MetricStub","db","beforeEach","createSandbox","belongsTo","setupDatabase","afterEach","restore","serial","t","pass","truthy","Metric","true","called","calledWith","calledOnce","metric","create"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,0BAAD,CAA7B;;AAEA,IAAII,OAAO,GAAG,IAAd;AACA,MAAMC,IAAI,GAAG,aAAb;AACA,MAAMC,MAAM,GAAG;AACb;AACA;AACAC,EAAAA,OAAO,EAAE,YAAY,CAAE;AAHV,CAAf;AAKA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAE;AAAEJ,IAAAA;AAAF;AADQ,CAAjB;AAIA,MAAMK,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAET,KAAK,CAACU,GAAN;AADO,CAAlB,C,CAGA;;AACAF,SAAS,CAACG,OAAV,GAAoBT,OAAO,CAACU,IAAR,EAApB;AACAJ,SAAS,CAACG,OAAV,CAAkBE,QAAlB,CAA2BP,QAA3B,EAAqCQ,OAArC,CAA6CC,OAAO,CAACC,OAAR,CAAgBf,aAAa,CAACgB,MAAd,CAAqBd,IAArB,CAAhB,CAA7C;AACA,MAAMe,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,WADU;AAEhBC,EAAAA,KAAK,EAAE,GAFS,CAGhB;AACA;;AAJgB,CAAlB;AAMA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,EAAE,GAAG,IAAT;AACAzB,IAAI,CAAC0B,UAAL,CAAgB,YAAY;AAC1BrB,EAAAA,OAAO,GAAGF,KAAK,CAACwB,aAAN,EAAV;AACAH,EAAAA,UAAU,GAAG;AACXI,IAAAA,SAAS,EAAEvB,OAAO,CAACQ,GAAR;AADA,GAAb,CAF0B,CAK1B;;AACA,QAAMgB,aAAa,GAAG3B,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMS,SADc;AAEtC,uBAAmB,MAAMa;AAFa,GAAR,CAAhC;AAIAC,EAAAA,EAAE,GAAG,MAAMI,aAAa,CAACtB,MAAD,CAAxB;AACD,CAXD;AAaAP,IAAI,CAAC8B,SAAL,CAAe,YAAY;AACzBzB,EAAAA,OAAO,IAAIA,OAAO,CAAC0B,OAAR,EAAX;AACD,CAFD;AAGA/B,IAAI,CAACgC,MAAL,CAAY,cAAZ,EAA4BC,CAAC,IAAI;AAC/BA,EAAAA,CAAC,CAACC,IAAF;AACD,CAFD;AAIAlC,IAAI,CAACgC,MAAL,CAAY,cAAZ,EAA4BC,CAAC,IAAI;AAC/BA,EAAAA,CAAC,CAACE,MAAF,CAASV,EAAE,CAACW,MAAZ,EAAoB,6BAApB;AACD,CAFD;AAIApC,IAAI,CAACgC,MAAL,CAAY,OAAZ,EAAqBC,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAO1B,SAAS,CAACC,OAAV,CAAkB0B,MAAzB,EAAiC,oBAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOb,UAAU,CAACI,SAAX,CAAqBU,MAA5B,EAAoC,mBAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAO1B,SAAS,CAACC,OAAV,CAAkB2B,UAAlB,CAA6Bf,UAA7B,CAAP,EAAiD,oCAAjD;AACAS,EAAAA,CAAC,CAACI,IAAF,CAAOb,UAAU,CAACI,SAAX,CAAqBU,MAA5B,EAAoC,wBAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOb,UAAU,CAACI,SAAX,CAAqBY,UAA5B,EAAwC,6BAAxC;AACAP,EAAAA,CAAC,CAACI,IAAF,CAAOb,UAAU,CAACI,SAAX,CAAqBW,UAArB,CAAgC5B,SAAhC,CAAP,EAAmD,kCAAnD;AACD,CAPD;AASAX,IAAI,CAACgC,MAAL,CAAY,eAAZ,EAA6B,MAAMC,CAAN,IAAW;AACtC;AACA,QAAMQ,MAAM,GAAG,MAAMhB,EAAE,CAACW,MAAH,CAAUM,MAAV,CAAiBpC,IAAjB,EAAuBe,SAAvB,CAArB;AAEAY,EAAAA,CAAC,CAACI,IAAF,CAAO1B,SAAS,CAACG,OAAV,CAAkBwB,MAAzB,EAAiC,8BAAjC;AAED,CAND","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent.fixture')\n\nlet sandbox = null\nconst uuid = 'yyy-yyy-yyy'\nconst config = {\n  // este objeto de configuracion se le pasa a la base solo como base\n  // la configuracion de la base de prueba se genera en index validando que tiene esa config\n  logging: function () {}\n}\nconst uuidArgs = {\n  where: { uuid }\n}\n\nconst AgentStub = {\n  hasMany: sinon.spy()\n}\n// agent stub\nAgentStub.findOne = sandbox.stub()\nAgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byuuid(uuid)))\nconst newMetric = {\n  type: 'parlantes',\n  value: 900\n  // createdAt: new Date(),\n  // updatedAt: new Date()\n}\nlet MetricStub = null\nlet db = null\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  }\n  // obtenemos el modulo de configuracion de base de datos\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(async () => {\n  sandbox && sandbox.restore()\n})\ntest.serial('make it pass', t => {\n  t.pass()\n})\n\ntest.serial('metric exist', t => {\n  t.truthy(db.Metric, 'Metric service should exist')\n})\n\ntest.serial('setup', t => {\n  t.true(AgentStub.hasMany.called, 'shoyuld be execute')\n  t.true(MetricStub.belongsTo.called, 'should be execute')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledOnce, 'belongsTo was executed once')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n})\n\ntest.serial('Metric#create', async t => {\n  // creacion de metrica\n  const metric = await db.Metric.create(uuid, newMetric)\n\n  t.true(AgentStub.findOne.called, 'findONe should be called one')\n\n})\n"]}