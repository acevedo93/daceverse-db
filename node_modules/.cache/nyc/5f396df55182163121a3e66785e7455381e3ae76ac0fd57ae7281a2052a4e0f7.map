{"version":3,"sources":["src/tests/metric.spec.js"],"names":["test","require","proxyquire","sinon","sandbox","config","logging","AgentStub","hasMany","spy","MetricStub","db","beforeEach","createSandbox","belongsTo","setupDatabase","afterEach","restore","serial","t","pass","truthy","Metric","true","called"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,IAAd;AAEA,MAAMC,MAAM,GAAG;AACb;AACA;AACAC,EAAAA,OAAO,EAAE,YAAY,CAAE;AAHV,CAAf;AAMA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAEL,KAAK,CAACM,GAAN;AADO,CAAlB;AAIA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,EAAE,GAAG,IAAT;AACAX,IAAI,CAACY,UAAL,CAAgB,YAAY;AAC1BR,EAAAA,OAAO,GAAGD,KAAK,CAACU,aAAN,EAAV;AACAH,EAAAA,UAAU,GAAG;AACXI,IAAAA,SAAS,EAAEV,OAAO,CAACK,GAAR;AADA,GAAb,CAF0B,CAK1B;;AACA,QAAMM,aAAa,GAAGb,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMK,SADc;AAEtC,uBAAmB,MAAMG;AAFa,GAAR,CAAhC;AAIAC,EAAAA,EAAE,GAAG,MAAMI,aAAa,CAACV,MAAD,CAAxB;AACD,CAXD;AAaAL,IAAI,CAACgB,SAAL,CAAe,YAAY;AACzBZ,EAAAA,OAAO,IAAIA,OAAO,CAACa,OAAR,EAAX;AACD,CAFD;AAGAjB,IAAI,CAACkB,MAAL,CAAY,cAAZ,EAA4BC,CAAC,IAAI;AAC/BA,EAAAA,CAAC,CAACC,IAAF;AACD,CAFD;AAIApB,IAAI,CAACkB,MAAL,CAAY,cAAZ,EAA4BC,CAAC,IAAI;AAC/BA,EAAAA,CAAC,CAACE,MAAF,CAASV,EAAE,CAACW,MAAZ,EAAoB,6BAApB;AACD,CAFD;AAIAtB,IAAI,CAACkB,MAAL,CAAY,OAAZ,EAAqBC,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOhB,SAAS,CAACC,OAAV,CAAkBgB,MAAzB,EAAiC,oBAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOb,UAAU,CAACI,SAAX,CAAqBU,MAA5B,EAAoC,mBAApC;AACD,CAHD","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nlet sandbox = null\n\nconst config = {\n  // este objeto de configuracion se le pasa a la base solo como base\n  // la configuracion de la base de prueba se genera en index validando que tiene esa config\n  logging: function () {}\n}\n\nconst AgentStub = {\n  hasMany: sinon.spy()\n}\n\nlet MetricStub = null\nlet db = null\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  }\n  // obtenemos el modulo de configuracion de base de datos\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(async () => {\n  sandbox && sandbox.restore()\n})\ntest.serial('make it pass', t => {\n  t.pass()\n})\n\ntest.serial('metric exist', t => {\n  t.truthy(db.Metric, 'Metric service should exist')\n})\n\ntest.serial('setup', t => {\n  t.true(AgentStub.hasMany.called, 'shoyuld be execute')\n  t.true(MetricStub.belongsTo.called, 'should be execute')\n})\n"]}