{"version":3,"sources":["src/tests/agent.spec.js"],"names":["db","test","require","proxyquire","sinon","agentFixtures","config","logging","sandbox","MetricStub","belongsTo","spy","single","id","AgentStub","beforeEach","createSandbox","hasMany","findById","stub","setupDatabase","afterEach","t","restore","pass","truthy","Agent","serial","true","called","calledWith","agent","deepEqual"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAG,IAAT;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,0BAAD,CAA7B;;AAEA,MAAMI,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADV,CAAf;AAGA,IAAIC,OAAO,GAAG,IAAd;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAEN,KAAK,CAACO,GAAN;AADM,CAAnB;AAGA,IAAIC,MAAM,GAAG,EAAE,GAAGP,aAAa,CAACO;AAAnB,CAAb;AACA,IAAIC,EAAE,GAAG,CAAT;AAEA,IAAIC,SAAS,GAAG,IAAhB,C,CACA;;AACAb,IAAI,CAACc,UAAL,CAAgB,YAAY;AAC1BP,EAAAA,OAAO,GAAGJ,KAAK,CAACY,aAAN,EAAV;AAEAF,EAAAA,SAAS,GAAG;AACVG,IAAAA,OAAO,EAAET,OAAO,CAACG,GAAR,EADC;AAEVO,IAAAA,QAAQ,EAAEV,OAAO,CAACW,IAAR;AAFA,GAAZ;AAIA,QAAMC,aAAa,GAAGjB,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMW,SADc;AAEtC,uBAAmB,MAAML;AAFa,GAAR,CAAhC;AAIAT,EAAAA,EAAE,GAAG,MAAMoB,aAAa,CAACd,MAAD,CAAxB;AACD,CAZD;AAcAL,IAAI,CAACoB,SAAL,CAAeC,CAAC,IAAI;AAClBd,EAAAA,OAAO,IAAIA,OAAO,CAACe,OAAR,EAAX;AACD,CAFD;AAIAtB,IAAI,CAAC,cAAD,EAAiBqB,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACE,IAAF;AACD,CAFG,CAAJ;AAIAvB,IAAI,CAAC,OAAD,EAAUqB,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACG,MAAF,CAASzB,EAAE,CAAC0B,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ;AAIAzB,IAAI,CAAC0B,MAAL,CAAY,OAAZ,EAAqBL,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACM,IAAF,CAAOd,SAAS,CAACG,OAAV,CAAkBY,MAAzB,EAAiC,iCAAjC;AACAP,EAAAA,CAAC,CAACM,IAAF,CAAOd,SAAS,CAACG,OAAV,CAAkBa,UAAlB,CAA6BrB,UAA7B,CAAP,EAAiD,0BAAjD;AACAa,EAAAA,CAAC,CAACM,IAAF,CAAOnB,UAAU,CAACC,SAAX,CAAqBmB,MAA5B,EAAoC,oCAApC;AACAP,EAAAA,CAAC,CAACM,IAAF,CAAOnB,UAAU,CAACC,SAAX,CAAqBoB,UAArB,CAAgChB,SAAhC,CAAP,EAAmD,0BAAnD;AACD,CALD;AAMAb,IAAI,CAAC0B,MAAL,CAAY,gBAAZ,EAA8B,MAAML,CAAN,IAAW;AACvC,QAAMS,KAAK,GAAG,MAAM/B,EAAE,CAAC0B,KAAH,CAASR,QAAT,CAAkBL,EAAlB,CAApB;AACAS,EAAAA,CAAC,CAACU,SAAF,CAAYD,KAAZ,EAAmB1B,aAAa,CAACa,QAAd,CAAuBL,EAAvB,CAAnB,EAA+C,oBAA/C;AACD,CAHD","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\n\nlet db = null\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent.fixture')\n\nconst config = {\n  logging: function () {}\n}\nlet sandbox = null\nconst MetricStub = {\n  belongsTo: sinon.spy()\n}\nlet single = { ...agentFixtures.single }\nlet id = 1;\n\nlet AgentStub = null\n// -------------------------------//\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy(),\n    findById: sandbox.stub()\n  }\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(t => {\n  sandbox && sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.pass()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service chould exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'argument is full correct')\n  t.true(MetricStub.belongsTo.called, 'metricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'argument is full correct')\n})\ntest.serial('Agent#findById', async t => {\n  const agent = await db.Agent.findById(id)\n  t.deepEqual(agent, agentFixtures.findById(id), 'should be the same')\n})\n"]}