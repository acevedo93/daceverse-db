'use strict';var cov_2nvztf191d=function(){var path="/home/david/code/daceverse/daceverse-db/src/tests/agent.spec.js";var hash="594c32c4abe8c23de4934af8f38304a4c640b0ae";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/david/code/daceverse/daceverse-db/src/tests/agent.spec.js",statementMap:{"0":{start:{line:3,column:9},end:{line:3,column:13}},"1":{start:{line:5,column:13},end:{line:5,column:27}},"2":{start:{line:7,column:19},end:{line:7,column:40}},"3":{start:{line:9,column:14},end:{line:9,column:30}},"4":{start:{line:11,column:22},end:{line:11,column:57}},"5":{start:{line:13,column:15},end:{line:15,column:1}},"6":{start:{line:16,column:14},end:{line:16,column:18}},"7":{start:{line:17,column:19},end:{line:19,column:1}},"8":{start:{line:20,column:15},end:{line:21,column:1}},"9":{start:{line:22,column:17},end:{line:23,column:1}},"10":{start:{line:24,column:11},end:{line:24,column:12}},"11":{start:{line:25,column:13},end:{line:25,column:26}},"12":{start:{line:26,column:17},end:{line:30,column:1}},"13":{start:{line:31,column:16},end:{line:31,column:20}},"14":{start:{line:33,column:0},end:{line:53,column:3}},"15":{start:{line:34,column:2},end:{line:34,column:34}},"16":{start:{line:35,column:2},end:{line:37,column:4}},"17":{start:{line:39,column:2},end:{line:39,column:38}},"18":{start:{line:40,column:2},end:{line:40,column:87}},"19":{start:{line:42,column:2},end:{line:42,column:37}},"20":{start:{line:43,column:2},end:{line:43,column:92}},"21":{start:{line:44,column:2},end:{line:44,column:36}},"22":{start:{line:45,column:2},end:{line:45,column:79}},"23":{start:{line:48,column:24},end:{line:51,column:4}},"24":{start:{line:49,column:28},end:{line:49,column:37}},"25":{start:{line:50,column:29},end:{line:50,column:39}},"26":{start:{line:52,column:2},end:{line:52,column:35}},"27":{start:{line:54,column:0},end:{line:56,column:3}},"28":{start:{line:55,column:2},end:{line:55,column:31}},"29":{start:{line:57,column:0},end:{line:59,column:3}},"30":{start:{line:58,column:2},end:{line:58,column:11}},"31":{start:{line:60,column:0},end:{line:62,column:3}},"32":{start:{line:61,column:2},end:{line:61,column:51}},"33":{start:{line:63,column:0},end:{line:68,column:3}},"34":{start:{line:64,column:2},end:{line:64,column:70}},"35":{start:{line:65,column:2},end:{line:65,column:79}},"36":{start:{line:66,column:2},end:{line:66,column:76}},"37":{start:{line:67,column:2},end:{line:67,column:81}},"38":{start:{line:69,column:0},end:{line:75,column:3}},"39":{start:{line:70,column:16},end:{line:70,column:43}},"40":{start:{line:71,column:2},end:{line:71,column:70}},"41":{start:{line:72,column:2},end:{line:72,column:78}},"42":{start:{line:73,column:2},end:{line:73,column:44}},"43":{start:{line:74,column:2},end:{line:74,column:71}},"44":{start:{line:76,column:0},end:{line:82,column:3}},"45":{start:{line:77,column:16},end:{line:77,column:53}},"46":{start:{line:78,column:2},end:{line:78,column:53}},"47":{start:{line:79,column:2},end:{line:79,column:66}},"48":{start:{line:80,column:2},end:{line:80,column:69}},"49":{start:{line:81,column:2},end:{line:81,column:64}},"50":{start:{line:83,column:0},end:{line:86,column:3}},"51":{start:{line:84,column:17},end:{line:84,column:41}},"52":{start:{line:85,column:2},end:{line:85,column:70}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:11},end:{line:14,column:12}},loc:{start:{line:14,column:23},end:{line:14,column:25}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:16},end:{line:33,column:17}},loc:{start:{line:33,column:28},end:{line:53,column:1}},line:33},"2":{name:"(anonymous_2)",decl:{start:{line:49,column:22},end:{line:49,column:23}},loc:{start:{line:49,column:28},end:{line:49,column:37}},line:49},"3":{name:"(anonymous_3)",decl:{start:{line:50,column:23},end:{line:50,column:24}},loc:{start:{line:50,column:29},end:{line:50,column:39}},line:50},"4":{name:"(anonymous_4)",decl:{start:{line:54,column:15},end:{line:54,column:16}},loc:{start:{line:54,column:20},end:{line:56,column:1}},line:54},"5":{name:"(anonymous_5)",decl:{start:{line:57,column:21},end:{line:57,column:22}},loc:{start:{line:57,column:26},end:{line:59,column:1}},line:57},"6":{name:"(anonymous_6)",decl:{start:{line:60,column:14},end:{line:60,column:15}},loc:{start:{line:60,column:19},end:{line:62,column:1}},line:60},"7":{name:"(anonymous_7)",decl:{start:{line:63,column:21},end:{line:63,column:22}},loc:{start:{line:63,column:26},end:{line:68,column:1}},line:63},"8":{name:"(anonymous_8)",decl:{start:{line:69,column:30},end:{line:69,column:31}},loc:{start:{line:69,column:41},end:{line:75,column:1}},line:69},"9":{name:"(anonymous_9)",decl:{start:{line:76,column:56},end:{line:76,column:57}},loc:{start:{line:76,column:67},end:{line:82,column:1}},line:76},"10":{name:"(anonymous_10)",decl:{start:{line:83,column:29},end:{line:83,column:30}},loc:{start:{line:83,column:40},end:{line:86,column:1}},line:83}},branchMap:{"0":{loc:{start:{line:55,column:2},end:{line:55,column:30}},type:"binary-expr",locations:[{start:{line:55,column:2},end:{line:55,column:9}},{start:{line:55,column:13},end:{line:55,column:30}}],line:55}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"594c32c4abe8c23de4934af8f38304a4c640b0ae"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();let db=(cov_2nvztf191d.s[0]++,null);const test=(cov_2nvztf191d.s[1]++,require('ava'));const proxyquire=(cov_2nvztf191d.s[2]++,require('proxyquire'));const sinon=(cov_2nvztf191d.s[3]++,require('sinon'));const agentFixtures=(cov_2nvztf191d.s[4]++,require('./fixtures/agent.fixture'));const config=(cov_2nvztf191d.s[5]++,{logging:function(){cov_2nvztf191d.f[0]++;}});let sandbox=(cov_2nvztf191d.s[6]++,null);const MetricStub=(cov_2nvztf191d.s[7]++,{belongsTo:sinon.spy()});const single=(cov_2nvztf191d.s[8]++,{...agentFixtures.single});const newAgent=(cov_2nvztf191d.s[9]++,{...agentFixtures.newAgent});const id=(cov_2nvztf191d.s[10]++,1);const uuid=(cov_2nvztf191d.s[11]++,'yyy-yyy-yyy');const uuidArgs=(cov_2nvztf191d.s[12]++,{where:{uuid}});let AgentStub=(cov_2nvztf191d.s[13]++,null);// -------------------------------//
cov_2nvztf191d.s[14]++;test.beforeEach(async()=>{cov_2nvztf191d.f[1]++;cov_2nvztf191d.s[15]++;sandbox=sinon.createSandbox();cov_2nvztf191d.s[16]++;AgentStub={hasMany:sandbox.spy()};// find By Id
cov_2nvztf191d.s[17]++;AgentStub.findById=sandbox.stub();cov_2nvztf191d.s[18]++;AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.findById(id)));// createOrupdate when user exists
cov_2nvztf191d.s[19]++;AgentStub.findOne=sandbox.stub();cov_2nvztf191d.s[20]++;AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byuuid(uuid)));cov_2nvztf191d.s[21]++;AgentStub.update=sandbox.stub();cov_2nvztf191d.s[22]++;AgentStub.update.withArgs(single,uuidArgs).returns(Promise.resolve(single));// AgentStub.create = sandbox.stub();
// AgentStub.create.withArgs()
const setupDatabase=(cov_2nvztf191d.s[23]++,proxyquire('../',{'./models/agent':()=>{cov_2nvztf191d.f[2]++;cov_2nvztf191d.s[24]++;return AgentStub;},'./models/metric':()=>{cov_2nvztf191d.f[3]++;cov_2nvztf191d.s[25]++;return MetricStub;}}));cov_2nvztf191d.s[26]++;db=await setupDatabase(config);});cov_2nvztf191d.s[27]++;test.afterEach(t=>{cov_2nvztf191d.f[4]++;cov_2nvztf191d.s[28]++;(cov_2nvztf191d.b[0][0]++,sandbox)&&(cov_2nvztf191d.b[0][1]++,sandbox.restore());});cov_2nvztf191d.s[29]++;test('make it pass',t=>{cov_2nvztf191d.f[5]++;cov_2nvztf191d.s[30]++;t.pass();});cov_2nvztf191d.s[31]++;test('Agent',t=>{cov_2nvztf191d.f[6]++;cov_2nvztf191d.s[32]++;t.truthy(db.Agent,'Agent service chould exist');});cov_2nvztf191d.s[33]++;test.serial('Setup',t=>{cov_2nvztf191d.f[7]++;cov_2nvztf191d.s[34]++;t.true(AgentStub.hasMany.called,'AgentModel.hasmany was executed');cov_2nvztf191d.s[35]++;t.true(AgentStub.hasMany.calledWith(MetricStub),'argument is full correct');cov_2nvztf191d.s[36]++;t.true(MetricStub.belongsTo.called,'metricModel.belongsTo was executed');cov_2nvztf191d.s[37]++;t.true(MetricStub.belongsTo.calledWith(AgentStub),'argument is full correct');});cov_2nvztf191d.s[38]++;test.serial('Agent#findById',async t=>{cov_2nvztf191d.f[8]++;const agent=(cov_2nvztf191d.s[39]++,await db.Agent.findById(id));cov_2nvztf191d.s[40]++;t.true(AgentStub.findById.called,'find by id is should be called');cov_2nvztf191d.s[41]++;t.true(AgentStub.findById.calledOnce,'find by id is should be calledOnce');cov_2nvztf191d.s[42]++;t.true(AgentStub.findById.calledWith(id));cov_2nvztf191d.s[43]++;t.deepEqual(agent,agentFixtures.findById(id),'should be the same');});cov_2nvztf191d.s[44]++;test.serial('Agent#createOrUpdate - when agent exists',async t=>{cov_2nvztf191d.f[9]++;const agent=(cov_2nvztf191d.s[45]++,await db.Agent.createOrUpdate(single));cov_2nvztf191d.s[46]++;t.true(AgentStub.findOne.called,'should be call');cov_2nvztf191d.s[47]++;t.true(AgentStub.findOne.calledTwice,'should be call 2 times');cov_2nvztf191d.s[48]++;t.true(AgentStub.update.calledOnce,'update should be calle once');cov_2nvztf191d.s[49]++;t.deepEqual(agent,single,'Agent should be equal to single');});cov_2nvztf191d.s[50]++;test.serial('Agent#findAll',async t=>{cov_2nvztf191d.f[10]++;const agents=(cov_2nvztf191d.s[51]++,await db.Agent.findAll());cov_2nvztf191d.s[52]++;t.deepEqual(agents,agentFixtures.all,'agents should be the same');});//# sourceMappingURL=/home/david/code/daceverse/daceverse-db/node_modules/.cache/ava/9fb0b5d9e7bba121c4466f9a4ddc6395.js.map