'use strict';var cov_23st1075uu=function(){var path="/home/david/code/daceverse/daceverse-db/src/tests/metric.spec.js";var hash="f68ea99c58552dfa8147f74e8a646c9aee7f9f60";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/david/code/daceverse/daceverse-db/src/tests/metric.spec.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:27}},"1":{start:{line:5,column:19},end:{line:5,column:40}},"2":{start:{line:7,column:14},end:{line:7,column:30}},"3":{start:{line:9,column:14},end:{line:9,column:18}},"4":{start:{line:10,column:15},end:{line:14,column:1}},"5":{start:{line:15,column:18},end:{line:17,column:1}},"6":{start:{line:18,column:17},end:{line:18,column:21}},"7":{start:{line:19,column:9},end:{line:19,column:13}},"8":{start:{line:20,column:0},end:{line:31,column:3}},"9":{start:{line:21,column:2},end:{line:21,column:34}},"10":{start:{line:22,column:2},end:{line:24,column:4}},"11":{start:{line:26,column:24},end:{line:29,column:4}},"12":{start:{line:27,column:28},end:{line:27,column:37}},"13":{start:{line:28,column:29},end:{line:28,column:39}},"14":{start:{line:30,column:2},end:{line:30,column:35}},"15":{start:{line:32,column:0},end:{line:34,column:3}},"16":{start:{line:33,column:2},end:{line:33,column:31}},"17":{start:{line:35,column:0},end:{line:37,column:3}},"18":{start:{line:36,column:2},end:{line:36,column:11}},"19":{start:{line:38,column:0},end:{line:40,column:3}},"20":{start:{line:39,column:2},end:{line:39,column:53}},"21":{start:{line:41,column:0},end:{line:44,column:3}},"22":{start:{line:42,column:2},end:{line:42,column:57}},"23":{start:{line:43,column:2},end:{line:43,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:11},end:{line:13,column:12}},loc:{start:{line:13,column:23},end:{line:13,column:25}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:16},end:{line:20,column:17}},loc:{start:{line:20,column:28},end:{line:31,column:1}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:22},end:{line:27,column:23}},loc:{start:{line:27,column:28},end:{line:27,column:37}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:23},end:{line:28,column:24}},loc:{start:{line:28,column:29},end:{line:28,column:39}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:32,column:15},end:{line:32,column:16}},loc:{start:{line:32,column:27},end:{line:34,column:1}},line:32},"5":{name:"(anonymous_5)",decl:{start:{line:35,column:21},end:{line:35,column:22}},loc:{start:{line:35,column:26},end:{line:37,column:1}},line:35},"6":{name:"(anonymous_6)",decl:{start:{line:38,column:21},end:{line:38,column:22}},loc:{start:{line:38,column:26},end:{line:40,column:1}},line:38},"7":{name:"(anonymous_7)",decl:{start:{line:41,column:21},end:{line:41,column:22}},loc:{start:{line:41,column:26},end:{line:44,column:1}},line:41}},branchMap:{"0":{loc:{start:{line:33,column:2},end:{line:33,column:30}},type:"binary-expr",locations:[{start:{line:33,column:2},end:{line:33,column:9}},{start:{line:33,column:13},end:{line:33,column:30}}],line:33}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"f68ea99c58552dfa8147f74e8a646c9aee7f9f60"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const test=(cov_23st1075uu.s[0]++,require('ava'));const proxyquire=(cov_23st1075uu.s[1]++,require('proxyquire'));const sinon=(cov_23st1075uu.s[2]++,require('sinon'));let sandbox=(cov_23st1075uu.s[3]++,null);const config=(cov_23st1075uu.s[4]++,{// este objeto de configuracion se le pasa a la base solo como base
// la configuracion de la base de prueba se genera en index validando que tiene esa config
logging:function(){cov_23st1075uu.f[0]++;}});const AgentStub=(cov_23st1075uu.s[5]++,{hasMany:sinon.spy()});let MetricStub=(cov_23st1075uu.s[6]++,null);let db=(cov_23st1075uu.s[7]++,null);cov_23st1075uu.s[8]++;test.beforeEach(async()=>{cov_23st1075uu.f[1]++;cov_23st1075uu.s[9]++;sandbox=sinon.createSandbox();cov_23st1075uu.s[10]++;MetricStub={belongsTo:sandbox.spy()};// obtenemos el modulo de configuracion de base de datos
const setupDatabase=(cov_23st1075uu.s[11]++,proxyquire('../',{'./models/agent':()=>{cov_23st1075uu.f[2]++;cov_23st1075uu.s[12]++;return AgentStub;},'./models/metric':()=>{cov_23st1075uu.f[3]++;cov_23st1075uu.s[13]++;return MetricStub;}}));cov_23st1075uu.s[14]++;db=await setupDatabase(config);});cov_23st1075uu.s[15]++;test.afterEach(async()=>{cov_23st1075uu.f[4]++;cov_23st1075uu.s[16]++;(cov_23st1075uu.b[0][0]++,sandbox)&&(cov_23st1075uu.b[0][1]++,sandbox.restore());});cov_23st1075uu.s[17]++;test('make it pass',t=>{cov_23st1075uu.f[5]++;cov_23st1075uu.s[18]++;t.pass();});cov_23st1075uu.s[19]++;test('metric exist',t=>{cov_23st1075uu.f[6]++;cov_23st1075uu.s[20]++;t.truthy(db.Metric,'Metric service should exist');});cov_23st1075uu.s[21]++;test.serial('setup',t=>{cov_23st1075uu.f[7]++;cov_23st1075uu.s[22]++;t.true(AgentStub.hasMany.called,'shoyuld be execute');cov_23st1075uu.s[23]++;t.true(MetricStub.belongsTo.called,'should be execute');});//# sourceMappingURL=/home/david/code/daceverse/daceverse-db/node_modules/.cache/ava/f6dc0cbae3c70bf55c9fe19bba526665.js.map