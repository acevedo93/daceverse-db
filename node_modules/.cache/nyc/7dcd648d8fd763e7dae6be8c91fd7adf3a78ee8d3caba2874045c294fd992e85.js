'use strict';var cov_23st1075uu=function(){var path="/home/david/code/daceverse/daceverse-db/src/tests/metric.spec.js";var hash="e3499c11ec6e159e0b444374b5c2f8f8cb752bba";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/david/code/daceverse/daceverse-db/src/tests/metric.spec.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:27}},"1":{start:{line:5,column:19},end:{line:5,column:40}},"2":{start:{line:7,column:14},end:{line:7,column:30}},"3":{start:{line:9,column:22},end:{line:9,column:57}},"4":{start:{line:11,column:23},end:{line:11,column:59}},"5":{start:{line:13,column:14},end:{line:13,column:18}},"6":{start:{line:14,column:13},end:{line:14,column:26}},"7":{start:{line:15,column:15},end:{line:19,column:1}},"8":{start:{line:20,column:17},end:{line:24,column:1}},"9":{start:{line:25,column:18},end:{line:27,column:1}},"10":{start:{line:29,column:18},end:{line:34,column:1}},"11":{start:{line:35,column:17},end:{line:35,column:21}},"12":{start:{line:36,column:9},end:{line:36,column:13}},"13":{start:{line:37,column:0},end:{line:59,column:3}},"14":{start:{line:38,column:2},end:{line:38,column:34}},"15":{start:{line:39,column:2},end:{line:41,column:4}},"16":{start:{line:43,column:2},end:{line:43,column:37}},"17":{start:{line:44,column:2},end:{line:49,column:6}},"18":{start:{line:46,column:6},end:{line:46,column:44}},"19":{start:{line:51,column:2},end:{line:51,column:37}},"20":{start:{line:52,column:2},end:{line:52,column:92}},"21":{start:{line:54,column:24},end:{line:57,column:4}},"22":{start:{line:55,column:28},end:{line:55,column:37}},"23":{start:{line:56,column:29},end:{line:56,column:39}},"24":{start:{line:58,column:2},end:{line:58,column:35}},"25":{start:{line:60,column:0},end:{line:62,column:3}},"26":{start:{line:61,column:2},end:{line:61,column:31}},"27":{start:{line:63,column:0},end:{line:65,column:3}},"28":{start:{line:64,column:2},end:{line:64,column:11}},"29":{start:{line:66,column:0},end:{line:68,column:3}},"30":{start:{line:67,column:2},end:{line:67,column:53}},"31":{start:{line:69,column:0},end:{line:76,column:3}},"32":{start:{line:70,column:2},end:{line:70,column:57}},"33":{start:{line:71,column:2},end:{line:71,column:59}},"34":{start:{line:72,column:2},end:{line:72,column:89}},"35":{start:{line:73,column:2},end:{line:73,column:64}},"36":{start:{line:74,column:2},end:{line:74,column:73}},"37":{start:{line:75,column:2},end:{line:75,column:89}},"38":{start:{line:77,column:0},end:{line:88,column:3}},"39":{start:{line:81,column:17},end:{line:81,column:56}},"40":{start:{line:82,column:2},end:{line:82,column:67}},"41":{start:{line:83,column:2},end:{line:83,column:62}},"42":{start:{line:84,column:2},end:{line:84,column:96}},"43":{start:{line:85,column:2},end:{line:85,column:55}},"44":{start:{line:86,column:2},end:{line:86,column:71}},"45":{start:{line:87,column:2},end:{line:87,column:107}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:11},end:{line:18,column:12}},loc:{start:{line:18,column:23},end:{line:18,column:25}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:16},end:{line:37,column:17}},loc:{start:{line:37,column:28},end:{line:59,column:1}},line:37},"2":{name:"(anonymous_2)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:13},end:{line:47,column:5}},line:45},"3":{name:"(anonymous_3)",decl:{start:{line:55,column:22},end:{line:55,column:23}},loc:{start:{line:55,column:28},end:{line:55,column:37}},line:55},"4":{name:"(anonymous_4)",decl:{start:{line:56,column:23},end:{line:56,column:24}},loc:{start:{line:56,column:29},end:{line:56,column:39}},line:56},"5":{name:"(anonymous_5)",decl:{start:{line:60,column:15},end:{line:60,column:16}},loc:{start:{line:60,column:27},end:{line:62,column:1}},line:60},"6":{name:"(anonymous_6)",decl:{start:{line:63,column:28},end:{line:63,column:29}},loc:{start:{line:63,column:33},end:{line:65,column:1}},line:63},"7":{name:"(anonymous_7)",decl:{start:{line:66,column:28},end:{line:66,column:29}},loc:{start:{line:66,column:33},end:{line:68,column:1}},line:66},"8":{name:"(anonymous_8)",decl:{start:{line:69,column:21},end:{line:69,column:22}},loc:{start:{line:69,column:26},end:{line:76,column:1}},line:69},"9":{name:"(anonymous_9)",decl:{start:{line:77,column:29},end:{line:77,column:30}},loc:{start:{line:77,column:40},end:{line:88,column:1}},line:77}},branchMap:{"0":{loc:{start:{line:61,column:2},end:{line:61,column:30}},type:"binary-expr",locations:[{start:{line:61,column:2},end:{line:61,column:9}},{start:{line:61,column:13},end:{line:61,column:30}}],line:61}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"e3499c11ec6e159e0b444374b5c2f8f8cb752bba"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const test=(cov_23st1075uu.s[0]++,require('ava'));const proxyquire=(cov_23st1075uu.s[1]++,require('proxyquire'));const sinon=(cov_23st1075uu.s[2]++,require('sinon'));const agentFixtures=(cov_23st1075uu.s[3]++,require('./fixtures/agent.fixture'));const metricFixtures=(cov_23st1075uu.s[4]++,require('./fixtures/metric.fixture'));let sandbox=(cov_23st1075uu.s[5]++,null);const uuid=(cov_23st1075uu.s[6]++,'yyy-yyy-yyy');const config=(cov_23st1075uu.s[7]++,{// este objeto de configuracion se le pasa a la base solo como base
// la configuracion de la base de prueba se genera en index validando que tiene esa config
logging:function(){cov_23st1075uu.f[0]++;}});const uuidArgs=(cov_23st1075uu.s[8]++,{where:{uuid}});const AgentStub=(cov_23st1075uu.s[9]++,{hasMany:sinon.spy()});// agent stub
const newMetric=(cov_23st1075uu.s[10]++,{type:'fixture',value:900// createdAt: new Date(),
// updatedAt: new Date()
});let MetricStub=(cov_23st1075uu.s[11]++,null);let db=(cov_23st1075uu.s[12]++,null);cov_23st1075uu.s[13]++;test.beforeEach(async()=>{cov_23st1075uu.f[1]++;cov_23st1075uu.s[14]++;sandbox=sinon.createSandbox();cov_23st1075uu.s[15]++;MetricStub={belongsTo:sandbox.spy()};// metric stub
cov_23st1075uu.s[16]++;MetricStub.create=sandbox.stub();cov_23st1075uu.s[17]++;MetricStub.create.withArgs(metricFixtures.newMetricMetric).returns(Promise.resolve({toJSON(){cov_23st1075uu.f[2]++;cov_23st1075uu.s[18]++;return metricFixtures.newMetricMetric;}}));// agent stub
cov_23st1075uu.s[19]++;AgentStub.findOne=sandbox.stub();cov_23st1075uu.s[20]++;AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byuuid(uuid)));// obtenemos el modulo de configuracion de base de datos
const setupDatabase=(cov_23st1075uu.s[21]++,proxyquire('../',{'./models/agent':()=>{cov_23st1075uu.f[3]++;cov_23st1075uu.s[22]++;return AgentStub;},'./models/metric':()=>{cov_23st1075uu.f[4]++;cov_23st1075uu.s[23]++;return MetricStub;}}));cov_23st1075uu.s[24]++;db=await setupDatabase(config);});cov_23st1075uu.s[25]++;test.afterEach(async()=>{cov_23st1075uu.f[5]++;cov_23st1075uu.s[26]++;(cov_23st1075uu.b[0][0]++,sandbox)&&(cov_23st1075uu.b[0][1]++,sandbox.restore());});cov_23st1075uu.s[27]++;test.serial('make it pass',t=>{cov_23st1075uu.f[6]++;cov_23st1075uu.s[28]++;t.pass();});cov_23st1075uu.s[29]++;test.serial('metric exist',t=>{cov_23st1075uu.f[7]++;cov_23st1075uu.s[30]++;t.truthy(db.Metric,'Metric service should exist');});cov_23st1075uu.s[31]++;test.serial('setup',t=>{cov_23st1075uu.f[8]++;cov_23st1075uu.s[32]++;t.true(AgentStub.hasMany.called,'shoyuld be execute');cov_23st1075uu.s[33]++;t.true(MetricStub.belongsTo.called,'should be execute');cov_23st1075uu.s[34]++;t.true(AgentStub.hasMany.calledWith(MetricStub),'Argument should be the MetricModel');cov_23st1075uu.s[35]++;t.true(MetricStub.belongsTo.called,'belongsTo was executed');cov_23st1075uu.s[36]++;t.true(MetricStub.belongsTo.calledOnce,'belongsTo was executed once');cov_23st1075uu.s[37]++;t.true(MetricStub.belongsTo.calledWith(AgentStub),'Argument should be the AgentStub');});cov_23st1075uu.s[38]++;test.serial('Metric#create',async t=>{cov_23st1075uu.f[9]++;// creacion de metrica
// la diferencia entre new Metric y metricFixture.newMetric
// es que cuando usamos newMetric el id del cliente aun no fue agregado al objeto
const metric=(cov_23st1075uu.s[39]++,await db.Metric.create(uuid,newMetric));cov_23st1075uu.s[40]++;t.true(AgentStub.findOne.called,'findONe should be called one');cov_23st1075uu.s[41]++;t.true(AgentStub.findOne.calledOnce,'findONe called once');cov_23st1075uu.s[42]++;t.true(AgentStub.findOne.calledWith(uuidArgs),'find One should be calle with uuid argument');cov_23st1075uu.s[43]++;t.true(MetricStub.create.called,'should be called');cov_23st1075uu.s[44]++;t.true(MetricStub.create.calledOnce,'create should be called once');cov_23st1075uu.s[45]++;t.true(MetricStub.create.calledWith(newMetric),'create should be called with specified newMetric Args');// t.deepEqual(metric, newMetric, 'metric should be the same')
});//# sourceMappingURL=/home/david/code/daceverse/daceverse-db/node_modules/.cache/ava/b3a58c28469b74bcd5e3540f7741e4a5.js.map