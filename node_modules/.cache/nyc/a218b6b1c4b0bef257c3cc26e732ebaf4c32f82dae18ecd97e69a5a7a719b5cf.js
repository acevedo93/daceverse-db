'use strict';var cov_23st1075uu=function(){var path="/home/david/code/daceverse/daceverse-db/src/tests/metric.spec.js";var hash="325b58a8dc4bf780dcb42731079d2d7b6a984a90";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/david/code/daceverse/daceverse-db/src/tests/metric.spec.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:27}},"1":{start:{line:5,column:19},end:{line:5,column:40}},"2":{start:{line:7,column:14},end:{line:7,column:30}},"3":{start:{line:9,column:22},end:{line:9,column:57}},"4":{start:{line:11,column:23},end:{line:11,column:59}},"5":{start:{line:13,column:14},end:{line:13,column:18}},"6":{start:{line:14,column:13},end:{line:14,column:26}},"7":{start:{line:15,column:13},end:{line:15,column:22}},"8":{start:{line:16,column:15},end:{line:20,column:1}},"9":{start:{line:21,column:17},end:{line:25,column:1}},"10":{start:{line:26,column:18},end:{line:28,column:1}},"11":{start:{line:29,column:20},end:{line:40,column:1}},"12":{start:{line:42,column:18},end:{line:47,column:1}},"13":{start:{line:48,column:17},end:{line:48,column:21}},"14":{start:{line:49,column:9},end:{line:49,column:13}},"15":{start:{line:50,column:0},end:{line:82,column:3}},"16":{start:{line:51,column:2},end:{line:51,column:34}},"17":{start:{line:52,column:2},end:{line:54,column:4}},"18":{start:{line:56,column:2},end:{line:56,column:37}},"19":{start:{line:57,column:2},end:{line:62,column:6}},"20":{start:{line:59,column:6},end:{line:59,column:38}},"21":{start:{line:64,column:2},end:{line:64,column:38}},"22":{start:{line:65,column:2},end:{line:70,column:6}},"23":{start:{line:67,column:6},end:{line:67,column:32}},"24":{start:{line:72,column:2},end:{line:72,column:106}},"25":{start:{line:74,column:2},end:{line:74,column:37}},"26":{start:{line:75,column:2},end:{line:75,column:92}},"27":{start:{line:77,column:24},end:{line:80,column:4}},"28":{start:{line:78,column:28},end:{line:78,column:37}},"29":{start:{line:79,column:29},end:{line:79,column:39}},"30":{start:{line:81,column:2},end:{line:81,column:35}},"31":{start:{line:83,column:0},end:{line:85,column:3}},"32":{start:{line:84,column:2},end:{line:84,column:31}},"33":{start:{line:86,column:0},end:{line:88,column:3}},"34":{start:{line:87,column:2},end:{line:87,column:11}},"35":{start:{line:89,column:0},end:{line:91,column:3}},"36":{start:{line:90,column:2},end:{line:90,column:53}},"37":{start:{line:92,column:0},end:{line:99,column:3}},"38":{start:{line:93,column:2},end:{line:93,column:57}},"39":{start:{line:94,column:2},end:{line:94,column:59}},"40":{start:{line:95,column:2},end:{line:95,column:89}},"41":{start:{line:96,column:2},end:{line:96,column:64}},"42":{start:{line:97,column:2},end:{line:97,column:73}},"43":{start:{line:98,column:2},end:{line:98,column:89}},"44":{start:{line:100,column:0},end:{line:112,column:3}},"45":{start:{line:104,column:17},end:{line:104,column:56}},"46":{start:{line:105,column:2},end:{line:105,column:67}},"47":{start:{line:106,column:2},end:{line:106,column:62}},"48":{start:{line:107,column:2},end:{line:107,column:96}},"49":{start:{line:108,column:2},end:{line:108,column:55}},"50":{start:{line:109,column:2},end:{line:109,column:71}},"51":{start:{line:110,column:2},end:{line:110,column:122}},"52":{start:{line:111,column:2},end:{line:111,column:77}},"53":{start:{line:113,column:0},end:{line:119,column:3}},"54":{start:{line:114,column:17},end:{line:114,column:54}},"55":{start:{line:115,column:2},end:{line:115,column:65}},"56":{start:{line:116,column:2},end:{line:116,column:73}},"57":{start:{line:117,column:2},end:{line:117,column:94}},"58":{start:{line:118,column:2},end:{line:118,column:60}},"59":{start:{line:120,column:0},end:{line:124,column:3}},"60":{start:{line:121,column:17},end:{line:121,column:64}},"61":{start:{line:122,column:2},end:{line:122,column:65}},"62":{start:{line:123,column:2},end:{line:123,column:73}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:11},end:{line:19,column:12}},loc:{start:{line:19,column:23},end:{line:19,column:25}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:50,column:16},end:{line:50,column:17}},loc:{start:{line:50,column:28},end:{line:82,column:1}},line:50},"2":{name:"(anonymous_2)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:13},end:{line:60,column:5}},line:58},"3":{name:"(anonymous_3)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:13},end:{line:68,column:5}},line:66},"4":{name:"(anonymous_4)",decl:{start:{line:78,column:22},end:{line:78,column:23}},loc:{start:{line:78,column:28},end:{line:78,column:37}},line:78},"5":{name:"(anonymous_5)",decl:{start:{line:79,column:23},end:{line:79,column:24}},loc:{start:{line:79,column:29},end:{line:79,column:39}},line:79},"6":{name:"(anonymous_6)",decl:{start:{line:83,column:15},end:{line:83,column:16}},loc:{start:{line:83,column:27},end:{line:85,column:1}},line:83},"7":{name:"(anonymous_7)",decl:{start:{line:86,column:28},end:{line:86,column:29}},loc:{start:{line:86,column:33},end:{line:88,column:1}},line:86},"8":{name:"(anonymous_8)",decl:{start:{line:89,column:28},end:{line:89,column:29}},loc:{start:{line:89,column:33},end:{line:91,column:1}},line:89},"9":{name:"(anonymous_9)",decl:{start:{line:92,column:21},end:{line:92,column:22}},loc:{start:{line:92,column:26},end:{line:99,column:1}},line:92},"10":{name:"(anonymous_10)",decl:{start:{line:100,column:29},end:{line:100,column:30}},loc:{start:{line:100,column:40},end:{line:112,column:1}},line:100},"11":{name:"(anonymous_11)",decl:{start:{line:113,column:38},end:{line:113,column:39}},loc:{start:{line:113,column:49},end:{line:119,column:1}},line:113},"12":{name:"(anonymous_12)",decl:{start:{line:120,column:42},end:{line:120,column:43}},loc:{start:{line:120,column:53},end:{line:124,column:1}},line:120}},branchMap:{"0":{loc:{start:{line:84,column:2},end:{line:84,column:30}},type:"binary-expr",locations:[{start:{line:84,column:2},end:{line:84,column:9}},{start:{line:84,column:13},end:{line:84,column:30}}],line:84}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"325b58a8dc4bf780dcb42731079d2d7b6a984a90"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const test=(cov_23st1075uu.s[0]++,require('ava'));const proxyquire=(cov_23st1075uu.s[1]++,require('proxyquire'));const sinon=(cov_23st1075uu.s[2]++,require('sinon'));const agentFixtures=(cov_23st1075uu.s[3]++,require('./fixtures/agent.fixture'));const metricFixtures=(cov_23st1075uu.s[4]++,require('./fixtures/metric.fixture'));let sandbox=(cov_23st1075uu.s[5]++,null);const uuid=(cov_23st1075uu.s[6]++,'yyy-yyy-yyy');const type=(cov_23st1075uu.s[7]++,'fixture');const config=(cov_23st1075uu.s[8]++,{// este objeto de configuracion se le pasa a la base solo como base
// la configuracion de la base de prueba se genera en index validando que tiene esa config
logging:function(){cov_23st1075uu.f[0]++;}});const uuidArgs=(cov_23st1075uu.s[9]++,{where:{uuid}});const AgentStub=(cov_23st1075uu.s[10]++,{hasMany:sinon.spy()});const findAllArgs=(cov_23st1075uu.s[11]++,{attributes:['type'],group:['type'],include:[{attributes:[],model:AgentStub,where:{uuid}}],raw:true});// agent stub
const newMetric=(cov_23st1075uu.s[12]++,{type:'fixture',value:900// createdAt: new Date(),
// updatedAt: new Date()
});let MetricStub=(cov_23st1075uu.s[13]++,null);let db=(cov_23st1075uu.s[14]++,null);cov_23st1075uu.s[15]++;test.beforeEach(async()=>{cov_23st1075uu.f[1]++;cov_23st1075uu.s[16]++;sandbox=sinon.createSandbox();cov_23st1075uu.s[17]++;MetricStub={belongsTo:sandbox.spy()};// metric stub
cov_23st1075uu.s[18]++;MetricStub.create=sandbox.stub();cov_23st1075uu.s[19]++;MetricStub.create.withArgs().returns(Promise.resolve({toJSON(){cov_23st1075uu.f[2]++;cov_23st1075uu.s[20]++;return metricFixtures.newMetric;}}));// find by type and uuid
cov_23st1075uu.s[21]++;MetricStub.findAll=sandbox.stub();cov_23st1075uu.s[22]++;MetricStub.findAll.withArgs().returns(Promise.resolve({toJSON(){cov_23st1075uu.f[3]++;cov_23st1075uu.s[23]++;return metricFixtures.all;}}));// find by agent uuid
cov_23st1075uu.s[24]++;MetricStub.findAll.withArgs(findAllArgs).returns(Promise.resolve(metricFixtures.findByAgentuuid(uuid)));// agent stub
cov_23st1075uu.s[25]++;AgentStub.findOne=sandbox.stub();cov_23st1075uu.s[26]++;AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byuuid(uuid)));// obtenemos el modulo de configuracion de base de datos
const setupDatabase=(cov_23st1075uu.s[27]++,proxyquire('../',{'./models/agent':()=>{cov_23st1075uu.f[4]++;cov_23st1075uu.s[28]++;return AgentStub;},'./models/metric':()=>{cov_23st1075uu.f[5]++;cov_23st1075uu.s[29]++;return MetricStub;}}));cov_23st1075uu.s[30]++;db=await setupDatabase(config);});cov_23st1075uu.s[31]++;test.afterEach(async()=>{cov_23st1075uu.f[6]++;cov_23st1075uu.s[32]++;(cov_23st1075uu.b[0][0]++,sandbox)&&(cov_23st1075uu.b[0][1]++,sandbox.restore());});cov_23st1075uu.s[33]++;test.serial('make it pass',t=>{cov_23st1075uu.f[7]++;cov_23st1075uu.s[34]++;t.pass();});cov_23st1075uu.s[35]++;test.serial('metric exist',t=>{cov_23st1075uu.f[8]++;cov_23st1075uu.s[36]++;t.truthy(db.Metric,'Metric service should exist');});cov_23st1075uu.s[37]++;test.serial('setup',t=>{cov_23st1075uu.f[9]++;cov_23st1075uu.s[38]++;t.true(AgentStub.hasMany.called,'shoyuld be execute');cov_23st1075uu.s[39]++;t.true(MetricStub.belongsTo.called,'should be execute');cov_23st1075uu.s[40]++;t.true(AgentStub.hasMany.calledWith(MetricStub),'Argument should be the MetricModel');cov_23st1075uu.s[41]++;t.true(MetricStub.belongsTo.called,'belongsTo was executed');cov_23st1075uu.s[42]++;t.true(MetricStub.belongsTo.calledOnce,'belongsTo was executed once');cov_23st1075uu.s[43]++;t.true(MetricStub.belongsTo.calledWith(AgentStub),'Argument should be the AgentStub');});cov_23st1075uu.s[44]++;test.serial('Metric#create',async t=>{cov_23st1075uu.f[10]++;// creacion de metrica
// la diferencia entre new Metric y metricFixture.newMetric
// es que cuando usamos newMetric el id del cliente aun no fue agregado al objeto
const metric=(cov_23st1075uu.s[45]++,await db.Metric.create(uuid,newMetric));cov_23st1075uu.s[46]++;t.true(AgentStub.findOne.called,'findONe should be called one');cov_23st1075uu.s[47]++;t.true(AgentStub.findOne.calledOnce,'findONe called once');cov_23st1075uu.s[48]++;t.true(AgentStub.findOne.calledWith(uuidArgs),'find One should be calle with uuid argument');cov_23st1075uu.s[49]++;t.true(MetricStub.create.called,'should be called');cov_23st1075uu.s[50]++;t.true(MetricStub.create.calledOnce,'create should be called once');cov_23st1075uu.s[51]++;t.true(MetricStub.create.calledWith(metricFixtures.newMetric),'create should be called with specified newMetric Args');cov_23st1075uu.s[52]++;t.deepEqual(metric,metricFixtures.newMetric,'metric should be the same');});cov_23st1075uu.s[53]++;test.serial('Metric#findByAgentUuid',async t=>{cov_23st1075uu.f[11]++;const metric=(cov_23st1075uu.s[54]++,await db.Metric.findByAgentUuid(uuid));cov_23st1075uu.s[55]++;t.true(MetricStub.findAll.called,'find all should be called');cov_23st1075uu.s[56]++;t.true(MetricStub.findAll.calledOnce,'findAll should be called once');cov_23st1075uu.s[57]++;t.true(MetricStub.findAll.calledWith(findAllArgs),'findAll should be called without args');cov_23st1075uu.s[58]++;t.deepEqual(metric,metricFixtures.findByAgentuuid(uuid));});cov_23st1075uu.s[59]++;test.serial('Metric#findByTypeAgentUuid',async t=>{cov_23st1075uu.f[12]++;const metric=(cov_23st1075uu.s[60]++,await db.metric.findByTypeAgentUuid(type,uuid));cov_23st1075uu.s[61]++;t.true(MetricStub.findAll.called,'find all should be called');cov_23st1075uu.s[62]++;t.true(MetricStub.findAll.calledOnce,'findAll should be called once');});//# sourceMappingURL=/home/david/code/daceverse/daceverse-db/node_modules/.cache/ava/a6fafcebce2c13df8e75cad28e01cc5d.js.map