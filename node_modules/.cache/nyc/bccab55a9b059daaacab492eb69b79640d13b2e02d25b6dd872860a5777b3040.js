'use strict';var cov_2iqhtqv13i=function(){var path="/home/david/code/daceverse/daceverse-db/src/index.js";var hash="32ddfa1991b88e4645a362eea1efb6592377afb7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/david/code/daceverse/daceverse-db/src/index.js",statementMap:{"0":{start:{line:2,column:22},end:{line:2,column:41}},"1":{start:{line:3,column:25},end:{line:3,column:51}},"2":{start:{line:4,column:24},end:{line:4,column:49}},"3":{start:{line:5,column:26},end:{line:5,column:52}},"4":{start:{line:7,column:0},end:{line:29,column:1}},"5":{start:{line:10,column:2},end:{line:10,column:43}},"6":{start:{line:11,column:20},end:{line:11,column:41}},"7":{start:{line:12,column:21},end:{line:12,column:44}},"8":{start:{line:13,column:22},end:{line:13,column:46}},"9":{start:{line:15,column:2},end:{line:15,column:33}},"10":{start:{line:16,column:2},end:{line:16,column:35}},"11":{start:{line:18,column:2},end:{line:18,column:32}},"12":{start:{line:20,column:2},end:{line:22,column:3}},"13":{start:{line:21,column:4},end:{line:21,column:41}},"14":{start:{line:23,column:16},end:{line:23,column:18}},"15":{start:{line:24,column:17},end:{line:24,column:19}},"16":{start:{line:25,column:2},end:{line:28,column:3}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:17},end:{line:7,column:18}},loc:{start:{line:7,column:35},end:{line:29,column:1}},line:7}},branchMap:{"0":{loc:{start:{line:20,column:2},end:{line:22,column:3}},type:"if",locations:[{start:{line:20,column:2},end:{line:22,column:3}},{start:{line:20,column:2},end:{line:22,column:3}}],line:20}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"32ddfa1991b88e4645a362eea1efb6592377afb7"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const setupDatabase=(cov_2iqhtqv13i.s[0]++,require('./lib/db'));const setupMetricModel=(cov_2iqhtqv13i.s[1]++,require('./models/metric'));const setupAgentModel=(cov_2iqhtqv13i.s[2]++,require('./models/agent'));const setupConfigTestDb=(cov_2iqhtqv13i.s[3]++,require('./tests/helpers'));cov_2iqhtqv13i.s[4]++;module.exports=async config=>{cov_2iqhtqv13i.f[0]++;cov_2iqhtqv13i.s[5]++;// si config no esta definido es necesario configurar una
// de pruebas
config=setupConfigTestDb({...config});const sequelize=(cov_2iqhtqv13i.s[6]++,setupDatabase(config));const AgentModel=(cov_2iqhtqv13i.s[7]++,setupAgentModel(config));const MetricModel=(cov_2iqhtqv13i.s[8]++,setupMetricModel(config));// un modelo tiene muchas metricas y una metric pertecene a un agente
cov_2iqhtqv13i.s[9]++;AgentModel.hasMany(MetricModel);cov_2iqhtqv13i.s[10]++;MetricModel.belongsTo(AgentModel);cov_2iqhtqv13i.s[11]++;await sequelize.authenticate();cov_2iqhtqv13i.s[12]++;if(config.setup){cov_2iqhtqv13i.b[0][0]++;cov_2iqhtqv13i.s[13]++;await sequelize.sync({force:true});}else{cov_2iqhtqv13i.b[0][1]++;}const Agent=(cov_2iqhtqv13i.s[14]++,{});const Metric=(cov_2iqhtqv13i.s[15]++,{});cov_2iqhtqv13i.s[16]++;return{Agent,Metric};};