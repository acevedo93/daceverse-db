{"version":3,"sources":["src/tests/agent.spec.js"],"names":["db","test","require","proxyquire","sinon","agentFixtures","config","logging","sandbox","MetricStub","belongsTo","spy","single","id","uuid","uuidArgs","where","AgentStub","beforeEach","createSandbox","hasMany","findById","stub","withArgs","returns","Promise","resolve","findOne","byuuid","update","setupDatabase","afterEach","t","restore","pass","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\n\nlet db = null\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent.fixture')\n\nconst config = {\n  logging: function () {}\n}\nlet sandbox = null\nconst MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nconst single = { ...agentFixtures.single }\nconst id = 1\nconst uuid = 'yyy-yyy-yyy'\n\nconst uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\nlet AgentStub = null\n// -------------------------------//\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n  // find By Id\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.findById(id)))\n  // createOrupdate when user exists\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byuuid(id)))\n\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n  // AgentStub.create = sandbox.stub();\n  // AgentStub.create.withArgs()\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(t => {\n  sandbox && sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.pass()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service chould exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'argument is full correct')\n  t.true(MetricStub.belongsTo.called, 'metricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'argument is full correct')\n})\ntest.serial('Agent#findById', async t => {\n  const agent = await db.Agent.findById(id)\n  t.true(AgentStub.findById.called, 'find by id is should be called')\n  t.true(AgentStub.findById.calledOnce, 'find by id is should be calledOnce')\n  t.true(AgentStub.findById.calledWith(id))\n  t.deepEqual(agent, agentFixtures.findById(id), 'should be the same')\n})\n\ntest.serial('Agent#createOrUpdate - when user exist', async t => {\n  const agent = await db.Agent.createOrUpdate(single)\n  t.true(AgentStub.findOne.called, 'should be call')\n  t.true(AgentStub.findOne.calledTwice, 'should be call 2 times')\n  t.true(AgentStub.update.calledOnce, 'update should be calle once')\n  t.deepEqual(agent, single, 'Agent should be equal to single')\n})\n"]}