'use strict';

let db = null;

const test = require('ava');

const proxyquire = require('proxyquire');

const sinon = require('sinon');

const config = {
  logging: function () {}
};
let sandbox = null;
const MetricStub = {
  belongsTo: sinon.spy()
};
let AgentStub = null;
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  AgentStub = {
    hasMany: sandbox.spy()
  };
  const setupDatabase = proxyquire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
});
test.afterEach(t => {
  sandbox && sandbox.restore();
});
test('make it pass', t => {
  t.pass();
});
test('Agent', t => {
  console.log(db);
  t.truthy(db.Agent, 'Agent service chould exist');
});
test.serial('Setup', t => {
  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany was executed');
  t.true(MetricStub.belongsTo.called, 'metricModel.belongsTo was executed');
});
//# sourceMappingURL=/home/david/code/daceverse/daceverse-db/node_modules/.cache/ava/130d4f5fba65d0be8696403bd664cd51.js.map