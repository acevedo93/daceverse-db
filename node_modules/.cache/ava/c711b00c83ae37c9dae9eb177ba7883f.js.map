{"version":3,"sources":["src/tests/agent.spec.js"],"names":["db","test","require","proxyquire","sinon","agentFixtures","config","logging","sandbox","MetricStub","belongsTo","spy","single","newAgent","id","uuid","uuidArgs","where","ArgsConnected","connected","AgentStub","beforeEach","createSandbox","hasMany","findById","stub","withArgs","returns","Promise","resolve","findOne","byuuid","update","findAll","all","setupDatabase","afterEach","t","restore","pass","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice","agents","is","length","findConnected"],"mappings":"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","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\n\nlet db = null\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent.fixture')\n\nconst config = {\n  logging: function () {}\n}\nlet sandbox = null\nconst MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nconst single = { ...agentFixtures.single }\nconst newAgent = { ...agentFixtures.newAgent }\nconst id = 1\nconst uuid = 'yyy-yyy-yyy'\n\nconst uuidArgs = {\n  where: {\n    uuid\n  }\n}\nconst ArgsConnected = {\n  where: {\n    connected: true\n  }\n}\n\nlet AgentStub = null\n// -------------------------------//\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n  // find By Id\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.findById(id)))\n  // createOrupdate when user exists\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byuuid(uuid)))\n\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n  // find all\n  AgentStub.findAll = sandbox.stub()\n  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\n  AgentStub.findAll.withArgs(ArgsConnected).returns(Promise.resolve(agentFixtures.connected))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(t => {\n  sandbox && sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.pass()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service chould exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'argument is full correct')\n  t.true(MetricStub.belongsTo.called, 'metricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'argument is full correct')\n})\ntest.serial('Agent#findById', async t => {\n  const agent = await db.Agent.findById(id)\n  t.true(AgentStub.findById.called, 'find by id is should be called')\n  t.true(AgentStub.findById.calledOnce, 'find by id is should be calledOnce')\n  t.true(AgentStub.findById.calledWith(id))\n  t.deepEqual(agent, agentFixtures.findById(id), 'should be the same')\n})\ntest.serial('Agent#createOrUpdate - when agent exists', async t => {\n  const agent = await db.Agent.createOrUpdate(single)\n  t.true(AgentStub.findOne.called, 'should be call')\n  t.true(AgentStub.findOne.calledTwice, 'should be call 2 times')\n  t.true(AgentStub.update.calledOnce, 'update should be calle once')\n  t.deepEqual(agent, single, 'Agent should be equal to single')\n})\ntest.serial('Agent#findAll', async t => {\n  const agents = await db.Agent.findAll()\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(AgentStub.findAll.calledWith(), 'findAll should be called without args')\n  t.deepEqual(agents, agentFixtures.all, 'agents should be the same')\n  t.is(agents.length, agentFixtures.all.length, 'should be the same length')\n})\ntest.serial('Agents#findConnected', async t => {\n  const agents = await db.Agent.findConnected()\n\n  t.deepEqual(agents, agentFixtures.connected, 'should be equal')\n})\n"]}