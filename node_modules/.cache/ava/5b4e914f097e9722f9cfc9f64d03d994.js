'use strict';

const test = require('ava');

const proxyquire = require('proxyquire');

const sinon = require('sinon');

let sandbox = null;
const config = {
  // este objeto de configuracion se le pasa a la base solo como base
  // la configuracion de la base de prueba se genera en index validando que tiene esa config
  logging: function () {}
};
const AgentStub = {
  hasMany: sinon.spy()
};
let MetricStub = null;
let db = null;
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  MetricStub = {
    belongsTo: sandbox.spy()
  }; // obtenemos el modulo de configuracion de base de datos

  const setupDatabase = proxyquire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
});
test.afterEach(async () => {
  sandbox && sandbox.restore();
});
test.serial('make it pass', t => {
  t.pass();
});
test.serial('metric exist', t => {
  t.truthy(db.Metric, 'Metric service should exist');
});
test.serial('setup', t => {
  t.true(AgentStub.hasMany.called, 'shoyuld be execute');
  t.true(MetricStub.belongsTo.called, 'should be execute');
});
//# sourceMappingURL=/home/david/code/daceverse/daceverse-db/node_modules/.cache/ava/5b4e914f097e9722f9cfc9f64d03d994.js.map