{"version":3,"sources":["src/tests/metric.spec.js"],"names":["test","require","proxyquire","sinon","sandbox","config","logging","AgentStub","hasMany","spy","MetricStub","beforeEach","belongsTo","setupDatabase","db","t","pass","truthy","Metric"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,OAAO,GAAG,IAAhB;AAEA,MAAMC,MAAM,GAAG;AACb;AACA;AACAC,EAAAA,OAAO,EAAE,YAAY,CAAE;AAHV,CAAf;AAMA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAEJ,OAAO,CAACK,GAAR;AADO,CAAlB;AAIA,IAAIC,UAAU,GAAG,IAAjB;AAEAV,IAAI,CAACW,UAAL,CAAgB,YAAY;AAC1BD,EAAAA,UAAU,GAAG;AACXE,IAAAA,SAAS,EAAET,KAAK,CAACM,GAAN;AADA,GAAb,CAD0B,CAI1B;;AACA,QAAMI,aAAa,GAAGX,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMK,SADc;AAEtC,uBAAmB,MAAMG;AAFa,GAAR,CAAhC;AAID,QAAMI,EAAE,GAAG,MAAMD,aAAa,CAACR,MAAD,CAA9B;AACA,CAVD;AAWAL,IAAI,CAAC,cAAD,EAAiBe,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACC,IAAF;AACD,CAFG,CAAJ;AAIAhB,IAAI,CAAC,cAAD,EAAiBe,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACE,MAAF,CAASH,EAAE,CAACI,MAAZ,EAAoB,6BAApB;AACD,CAFG,CAAJ","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nconst sandbox = null\n\nconst config = {\n  // este objeto de configuracion se le pasa a la base solo como base\n  // la configuracion de la base de prueba se genera en index validando que tiene esa config\n  logging: function () {}\n}\n\nconst AgentStub = {\n  hasMany: sandbox.spy()\n}\n\nlet MetricStub = null\n\ntest.beforeEach(async () => {\n  MetricStub = {\n    belongsTo: sinon.spy()\n  }\n  // obtenemos el modulo de configuracion de base de datos\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n const db = await setupDatabase(config)\n})\ntest('make it pass', t => {\n  t.pass()\n})\n\ntest('metric exist', t => {\n  t.truthy(db.Metric, 'Metric service should exist')\n})\n"]}