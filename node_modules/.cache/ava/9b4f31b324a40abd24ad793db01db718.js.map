{"version":3,"sources":["src/tests/agent.spec.js"],"names":["db","test","require","proxyquire","sinon","agentFixtures","config","logging","sandbox","MetricStub","belongsTo","spy","single","id","AgentStub","beforeEach","createSandbox","hasMany","findById","stub","withArgs","returns","Promise","resolve","setupDatabase","afterEach","t","restore","pass","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate"],"mappings":"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","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\n\nlet db = null\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent.fixture')\n\nconst config = {\n  logging: function () {}\n}\nlet sandbox = null\nconst MetricStub = {\n  belongsTo: sinon.spy()\n}\nlet single = { ...agentFixtures.single }\nlet id = 1;\n\nlet AgentStub = null\n// -------------------------------//\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.findById(id)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(t => {\n  sandbox && sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.pass()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service chould exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'argument is full correct')\n  t.true(MetricStub.belongsTo.called, 'metricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'argument is full correct')\n})\ntest.serial('Agent#findById', async t => {\n  const agent = await db.Agent.findById(id)\n  t.true(AgentStub.findById.called, 'find by id is should be called')\n  t.true(AgentStub.findById.calledOnce, 'find by id is should be calledOnce')\n  t.true(AgentStub.findById.calledWith(id))\n  t.deepEqual(agent, agentFixtures.findById(id), 'should be the same')\n})\n\ntest.serial('Agent#createOrUpdate', async t => {\n  const agent = await db.Agent.createOrUpdate(single)\n\n  t.deepEqual(agent, single, 'Agent should be equal to single')\n})\n"]}