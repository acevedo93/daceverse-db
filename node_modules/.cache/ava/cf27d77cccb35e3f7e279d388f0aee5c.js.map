{"version":3,"sources":["src/tests/metric.spec.js"],"names":["test","require","proxyquire","sinon","agentFixtures","metricFixtures","sandbox","uuid","config","logging","uuidArgs","where","AgentStub","hasMany","spy","findAllArgs","attributes","group","include","model","raw","newMetric","type","value","MetricStub","db","beforeEach","createSandbox","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","findAll","return","all","findByAgentuuid","findOne","byuuid","setupDatabase","afterEach","restore","serial","t","pass","truthy","Metric","true","called","calledWith","calledOnce","metric","deepEqual","findByAgentUuid"],"mappings":"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","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent.fixture')\nconst metricFixtures = require('./fixtures/metric.fixture')\nlet sandbox = null\nconst uuid = 'yyy-yyy-yyy'\nconst config = {\n  // este objeto de configuracion se le pasa a la base solo como base\n  // la configuracion de la base de prueba se genera en index validando que tiene esa config\n  logging: function () {}\n}\nconst uuidArgs = {\n  where: { uuid }\n}\n\nconst AgentStub = {\n  hasMany: sinon.spy()\n}\nconst findAllArgs = {\n  attributes: ['type'],\n  group: ['type'],\n  include: [{\n    attributes: [],\n    model: AgentStub,\n    where: {\n      uuid\n    }\n  }],\n  raw: true\n}\n// agent stub\n\nconst newMetric = {\n  type: 'fixture',\n  value: 900\n  // createdAt: new Date(),\n  // updatedAt: new Date()\n}\n\nlet MetricStub = null\nlet db = null\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  }\n  // metric stub\n  MetricStub.create = sandbox.stub()\n  MetricStub.create.withArgs().returns(Promise.resolve({\n    toJSON () {\n      return metricFixtures.newMetric\n    }\n  }))\n\n  // find by type and uuid\n  MetricStub.findAll = sandbox.stub()\n  MetricStub.findAll.withArgs().return(Promise.resolve({\n    toJSON () {\n      return metricFixtures.all\n    }\n  }))\n  // find by agent uuid\n  MetricStub.findAll.withArgs(findAllArgs).return(Promise.resolve({\n    toJSON () {\n      return metricFixtures.findByAgentuuid\n    }\n  }))\n  // agent stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byuuid(uuid)))\n  // obtenemos el modulo de configuracion de base de datos\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(async () => {\n  sandbox && sandbox.restore()\n})\ntest.serial('make it pass', t => {\n  t.pass()\n})\n\ntest.serial('metric exist', t => {\n  t.truthy(db.Metric, 'Metric service should exist')\n})\n\ntest.serial('setup', t => {\n  t.true(AgentStub.hasMany.called, 'shoyuld be execute')\n  t.true(MetricStub.belongsTo.called, 'should be execute')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledOnce, 'belongsTo was executed once')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n})\n\ntest.serial('Metric#create', async t => {\n  // creacion de metrica\n  // la diferencia entre new Metric y metricFixture.newMetric\n  // es que cuando usamos newMetric el id del cliente aun no fue agregado al objeto\n  const metric = await db.Metric.create(uuid, newMetric)\n  t.true(AgentStub.findOne.called, 'findONe should be called one')\n  t.true(AgentStub.findOne.calledOnce, 'findONe called once')\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'find One should be calle with uuid argument')\n  t.true(MetricStub.create.called, 'should be called')\n  t.true(MetricStub.create.calledOnce, 'create should be called once')\n  t.true(MetricStub.create.calledWith(metricFixtures.newMetric), 'create should be called with specified newMetric Args')\n  t.deepEqual(metric, metricFixtures.newMetric, 'metric should be the same')\n})\n\ntest.serial('Metric#findByAgentUuid', async t => {\n  const metric = await db.Metric.findByAgentUuid(uuid)\n\n  t.true(MetricStub.findAll.called, 'find all should be called')\n})\n"]}