{"version":3,"sources":["src/tests/agent.spec.js"],"names":["db","test","require","proxyquire","sinon","config","logging","sandbox","MetricStub","belongsTo","spy","AgentStub","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","t","restore","pass","console","log","truthy","Agent","serial","true","called","calledWith"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAG,IAAT;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADV,CAAf;AAGA,IAAIC,OAAO,GAAG,IAAd;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAEL,KAAK,CAACM,GAAN;AADM,CAAnB;AAIA,IAAIC,SAAS,GAAG,IAAhB;AAEAV,IAAI,CAACW,UAAL,CAAgB,YAAY;AAC1BL,EAAAA,OAAO,GAAGH,KAAK,CAACS,aAAN,EAAV;AACAF,EAAAA,SAAS,GAAG;AACVG,IAAAA,OAAO,EAAEP,OAAO,CAACG,GAAR;AADC,GAAZ;AAGA,QAAMK,aAAa,GAAGZ,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMQ,SADc;AAEtC,uBAAmB,MAAMH;AAFa,GAAR,CAAhC;AAIAR,EAAAA,EAAE,GAAG,MAAMe,aAAa,CAACV,MAAD,CAAxB;AACD,CAVD;AAYAJ,IAAI,CAACe,SAAL,CAAeC,CAAC,IAAI;AAClBV,EAAAA,OAAO,IAAIA,OAAO,CAACW,OAAR,EAAX;AACD,CAFD;AAIAjB,IAAI,CAAC,cAAD,EAAiBgB,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACE,IAAF;AACD,CAFG,CAAJ;AAIAlB,IAAI,CAAC,OAAD,EAAUgB,CAAC,IAAI;AACjBG,EAAAA,OAAO,CAACC,GAAR,CAAYrB,EAAZ;AACAiB,EAAAA,CAAC,CAACK,MAAF,CAAStB,EAAE,CAACuB,KAAZ,EAAmB,4BAAnB;AACD,CAHG,CAAJ;AAKAtB,IAAI,CAACuB,MAAL,CAAY,OAAZ,EAAqBP,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACQ,IAAF,CAAOd,SAAS,CAACG,OAAV,CAAkBY,MAAzB,EAAiC,iCAAjC;AACAT,EAAAA,CAAC,CAACQ,IAAF,CAAOd,SAAS,CAACG,OAAV,CAAkBa,UAAlB,CAA6BnB,UAA7B,CAAP,EAAiD,0BAAjD;AACAS,EAAAA,CAAC,CAACQ,IAAF,CAAOjB,UAAU,CAACC,SAAX,CAAqBiB,MAA5B,EAAoC,oCAApC;AACAT,EAAAA,CAAC,CAACQ,IAAF,CAAOjB,UAAU,CAACC,SAAX,CAAqBkB,UAArB,CAAgChB,SAAhC,CAAP,EAAmD,0BAAnD;AACD,CALD","sourceRoot":"/home/david/code/daceverse/daceverse-db","sourcesContent":["'use strict'\n\nlet db = null\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nconst config = {\n  logging: function () {}\n}\nlet sandbox = null\nconst MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet AgentStub = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(t => {\n  sandbox && sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.pass()\n})\n\ntest('Agent', t => {\n  console.log(db)\n  t.truthy(db.Agent, 'Agent service chould exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'argument is full correct')\n  t.true(MetricStub.belongsTo.called, 'metricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'argument is full correct')\n})\n"]}